// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Api.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace DAPI.Clients.BetaSerie
{
    using Api.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedBetaSerieClient : BetaSerieClient
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedBetaSerieClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> BetaSerieClient.GetPlanningFilmAnTvShowAsync(string authorization, string before, string after)
        {
            var arguments = new object[] { authorization, before, after };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetPlanningFilmAnTvShowAsync", new Type[] { typeof(string), typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> BetaSerieClient.GetNewBetaSerieNewssync(string authorization, int number)
        {
            var arguments = new object[] { authorization, number };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetNewBetaSerieNewssync", new Type[] { typeof(string), typeof(int) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace DAPI.Clients.Genius
{
    using Api.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedGeniusClient : GeniusClient
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedGeniusClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> GeniusClient.GetGeniusSearchAsync(string access_token, string q)
        {
            var arguments = new object[] { access_token, q };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetGeniusSearchAsync", new Type[] { typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> GeniusClient.GetGeniusDataforSongAsync(string access_token, int ID)
        {
            var arguments = new object[] { access_token, ID };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetGeniusDataforSongAsync", new Type[] { typeof(string), typeof(int) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace DAPI.Clients.IgDb
{
    using Api.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIgDbClient : IgDbClient
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIgDbClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> IgDbClient.GetSearchesAsync(string API_KEY, string search, string fields)
        {
            var arguments = new object[] { API_KEY, search, fields };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetSearchesAsync", new Type[] { typeof(string), typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IgDbClient.GetDataGamesAsync(string API_KEY, int id, string fields)
        {
            var arguments = new object[] { API_KEY, id, fields };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetDataGamesAsync", new Type[] { typeof(string), typeof(int), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> IgDbClient.GetReleaseDatesAsync(string API_KEY, int id, string fields)
        {
            var arguments = new object[] { API_KEY, id, fields };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetReleaseDatesAsync", new Type[] { typeof(string), typeof(int), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace DAPI.Clients.MovieDatabase
{
    using Api.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedMovieDatabaseClient : MovieDatabaseClient
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedMovieDatabaseClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<string> MovieDatabaseClient.GetPopularMovieAsync(string api_key, string language, string page)
        {
            var arguments = new object[] { api_key, language, page };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetPopularMovieAsync", new Type[] { typeof(string), typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> MovieDatabaseClient.GetEmissionPopularMovieAsync(string api_key, string language, string page)
        {
            var arguments = new object[] { api_key, language, page };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetEmissionPopularMovieAsync", new Type[] { typeof(string), typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<string> MovieDatabaseClient.GetSearchMovieDatabaseAsync(string api_key, string language, string query, string page, string include_adult)
        {
            var arguments = new object[] { api_key, language, query, page, include_adult };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetSearchMovieDatabaseAsync", new Type[] { typeof(string), typeof(string), typeof(string), typeof(string), typeof(string) });
            return (Task<string>)func(Client, arguments);
        }
    }
}
